<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" creationComplete="init()"
	xmlns:cust="com.psc.components.*">
	
	<mx:Script source="embeds.as"/>
	<mx:Style source="style.css"/>
	
	<mx:Script>
		<![CDATA[
		
				import flash.display.*;
				import flash.display.Loader;
				import flash.events.Event;
				import flash.net.URLRequest;
				import flash.net.URLLoader;			
				import flash.text.*;
		
				import utils.HTTPUtil;
		
			//*********************interface that the container will require:
			
			import mx.rpc.events.ResultEvent;
			
			private function init():void{
				this.systemManager.loaderInfo.sharedEvents.addEventListener('containerevent', gotevent);
				littlestfont = Math.ceil(this.width/50);
				gameinit();
			}
						
			private function gotevent(e:*):void{		
				trace('got event: ' + e.result.command);
				this[e.result.command]();
			}
			
			public function doSplash():void{
				trace('doing splash!!')
				gamebox.selectedChild = splash;
			}
			
			public function doGame():void{
				trace('doing game!!')
				gamebox.selectedChild = exwindow;
			}
			
			public function doResults():void{
				trace('doing results')
				gamebox.selectedChild = results;
			}
			
			private function ready(dat:Object = null):void{
				trace('ready')
				this.systemManager.loaderInfo.sharedEvents.dispatchEvent(
					new ResultEvent('gameevent', false, true, {gamedata:dat}));
			}
		
		/////////////////////////////////////////////////////////////////////////
				
				[Bindable]
				private var speedLev:int = 0;
				[Bindable]
				private var numCorr:int = 0;
				[Bindable]
				private var numTot:int = 0;
				[Bindable]
				private var littlestfont:int = 12;
		
		
				private var expTxt:String = ' <font size = "16">You just experienced the &quot;Stroop Effect.&quot;'+
            								'<br/>What does this mean? </font>'+
           ' <br/><br/>The 60-second Brain Game is a variation of psychological experiments that measure the &quot;Stroop effect.&quot;  These experiments require the brain to respond to conflicting information to measure its flexibility and speed. '+
           ' <br/><br/>Reaching higher levels means that your brain is faster and more flexible. How many you get correct doesn&#39;t really matter, because the game adapts to you. What matters is speed. '+
           ' <br/><br/>The 60-Second Brain Game was developed by Posit Science, the leader in brain fitness software programs clinically proven to help people think faster, focus better, and remember more.'
		
			
				private const _disclaimerdrivel:String = "Copyright 2009 Posit Science. All Rights Reserved."+
            	"Posit Science does not provide medical advice, diagnosis or treatment. Individual results from using our programs will vary.  "+
            	'Your use of the site indicates your agreement to be bound by the '+
            	'<font color = "#aa0000"><a href="http://www.positscience.com/terms.php">Terms and Conditions</a></font>;'+
            	' please review them before using the site. Our '+
            	'<font color = "#aa0000"><a href="http://www.positscience.com/privacy.php">Privacy Policy </a></font>changed on 7/13/09. '+
            	'We recommend you review the updated policy.'
            	
				private var _ex:MovieClip;				
				private var dataXML:XML = <configurations gameType="Stroop">
											<stimConfig stimConfig_id="1">
											  <stroopEffect>0</stroopEffect> 
											  <blockTime>30000</blockTime> 
											  <targetPercent>50</targetPercent> 
											  <initVal>60</initVal> 
											  <tutorial>0</tutorial> 
											</stimConfig>
											<stimConfig stimConfig_id="2">
											  <stroopEffect>1</stroopEffect> 
											  <blockTime>60000</blockTime> 
											  <targetPercent>40</targetPercent> 
											  <initVal>60</initVal> 
											  <tutorial>0</tutorial> 
											  </stimConfig>
										  </configurations>
									  
				private var block:uint = 0;
				private var resultsPage:String, practice:String;
			
				public function gameinit()
				{					
					var ldr:Loader = new Loader();
					ldr.contentLoaderInfo.addEventListener(Event.COMPLETE, LoaderCompleteHandler);
					ldr.load(new URLRequest('60sec.swf'));
					trace(res3.width)
					trace(res3.height)
					trace('sdofihlkhlkhlkdhflskhdflkshdlfkhslkhlkhlkhlkhlkhlkh')
				}
		
				public function LoaderCompleteHandler(e:Event):void
				{
					_ex = e.target.content as MovieClip;
					_ex.height=this.height;
					_ex.width=this.width;
					exwindow.rawChildren.addChild(_ex);	
					_ex.addEventListener("InitMovieDone", InitMovieDone);
					_ex.addEventListener("BlockFinished", BlockFinished);
					_ex.addEventListener("GameFinished", GameFinished);
					_ex["InitClass"]();
				}
				
				
				public function InitMovieDone(e:Event):void
				{
					trace("InitMovieDone() e "+e);
					if(block >= dataXML.stimConfig.length()){Graduate(); return;}
					
					var oParameters:Object = new Object();
					var thisBlock:XMLList = dataXML.stimConfig[block].children();
					for (var i:uint = 0; i < thisBlock.length(); i++){
						oParameters[thisBlock[i].name()] = thisBlock[i].toString();
					}
					oParameters.blockID = block+1;
					oParameters.resultsPage = resultsPage;
					oParameters.practice = practice;
					_ex['InitBlock'](oParameters);
				}
		
				public function BlockFinished(e:Event):void
				{
					trace("BlockFinished() e "+e);
					var sCommand:String = "InitBlock";
					var oParameters:Object = new Object();
					//exerciseInterface.ExecuteCommand(sCommand, oParameters);
					block++;
					InitMovieDone(e);
				}
		
				public function GameFinished(e:Event):void{
					speedLev = _ex['gLevel']
					numCorr = _ex['gTrialCorrect'];
					numTot = _ex['gTrialCount'];
					ready({level:_ex['gLevel'],
							 trials:_ex['gTrialCount'],
							 corrtrials:_ex['gTrialCorrect'], 
							 thresh:_ex['gThreshold'],
							 res_txt : "Top performer!<br/><br/>You made it to speed level "+speedLev.toString()+" (out of 5)"});
				}
				
//				public function ReviewBlockFinished(e:Event):void
//				{
//					trace('--------------------------------------review finish called!')
//				}
				
				public function Graduate():void					
				{
					trace('-----------------------------------------graduate called');	
					_ex['InitMap']({});		
				}
				
				public function startover():void{
					HTTPUtil.refresh();
				}
		]]>
	</mx:Script>
	
	<mx:ViewStack id = "gamebox" creationPolicy="all" width="100%" height = "100%">
	
		<cust:splash id="splash" backgroundImage="@Embed('assets/sixtysec/60SecSplash.jpg')" backgroundColor="0xddffee" >
			<mx:Spacer height="80%"/>
			<cust:positbutton click = "ready()" label = "Play now"/>
			<mx:TextArea editable="false" selectable="false" width="75%" height="15%"  htmlText="{_disclaimerdrivel}"
				paddingLeft="0" paddingBottom="0" paddingRight="0" verticalScrollPolicy="off" fontSize="{littlestfont*0.7}"
				 backgroundAlpha="0.0" backgroundColor="0xFFFFFF" borderThickness="0"/>
		</cust:splash>
		
		<mx:VBox id="exwindow" width="100%" height="100%" backgroundColor="0x00FF00" >
		</mx:VBox>
		
		<mx:VBox id = "results"  width="100%" height="100%" horizontalAlign="center"
			 paddingLeft="30" paddingRight="30" paddingTop="30">
			
			<mx:Label text="Detailed Results" fontSize="24" height="30" width="100%"/>
			
			<mx:HBox width="100%" height="100%">		 
		
				<mx:VBox width = "100%" height = "100%" verticalAlign="top">
					<mx:Box id = "res3" width = "220" height = "170" backgroundImage="@Embed('assets/sixtysec/BarGraph.jpg')"
						  backgroundSize="100%"/>
					<mx:Label text="Most get to speed level 3 (out of 5)"/>
					<mx:Label text = "Your score: speed level {speedLev} (out of 5)"/>
				
				</mx:VBox>
				
				<mx:VBox width = "100%" height = "100%" verticalAlign="top">
					<mx:TextArea selectable="false" editable="false" htmlText="{expTxt}" fontSize="{littlestfont*0.85}"
						width="100%" height = "100%" borderThickness="0" borderStyle="solid" cornerRadius="10" backgroundColor="0xddeeFF"/>
					<cust:positbutton label="Play Again!" click = "startover()" color="0x000055"/>
				</mx:VBox>
			
			</mx:HBox>
		</mx:VBox>
		
		
	</mx:ViewStack>

	
</mx:Application>
